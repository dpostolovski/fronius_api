# coding: utf-8

"""
    ThirdPartyApi

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PvSystemMetadataExpertModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_import': 'datetime',
        'id': 'str',
        'name': 'str',
        'peak_power': 'float',
        'address': 'AddressModel',
        'installation_date': 'datetime',
        'dalo_device_info': 'dict(str, DeviceInfoModel)'
    }

    attribute_map = {
        'last_import': 'LastImport',
        'id': 'Id',
        'name': 'Name',
        'peak_power': 'PeakPower',
        'address': 'Address',
        'installation_date': 'InstallationDate',
        'dalo_device_info': 'DaloDeviceInfo'
    }

    def __init__(self, last_import=None, id=None, name=None, peak_power=None, address=None, installation_date=None, dalo_device_info=None):  # noqa: E501
        """PvSystemMetadataExpertModel - a model defined in Swagger"""  # noqa: E501

        self._last_import = None
        self._id = None
        self._name = None
        self._peak_power = None
        self._address = None
        self._installation_date = None
        self._dalo_device_info = None
        self.discriminator = None

        if last_import is not None:
            self.last_import = last_import
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if peak_power is not None:
            self.peak_power = peak_power
        if address is not None:
            self.address = address
        if installation_date is not None:
            self.installation_date = installation_date
        if dalo_device_info is not None:
            self.dalo_device_info = dalo_device_info

    @property
    def last_import(self):
        """Gets the last_import of this PvSystemMetadataExpertModel.  # noqa: E501

        Last data import for pv system (only available with expert package).  # noqa: E501

        :return: The last_import of this PvSystemMetadataExpertModel.  # noqa: E501
        :rtype: datetime
        """
        return self._last_import

    @last_import.setter
    def last_import(self, last_import):
        """Sets the last_import of this PvSystemMetadataExpertModel.

        Last data import for pv system (only available with expert package).  # noqa: E501

        :param last_import: The last_import of this PvSystemMetadataExpertModel.  # noqa: E501
        :type: datetime
        """

        self._last_import = last_import

    @property
    def id(self):
        """Gets the id of this PvSystemMetadataExpertModel.  # noqa: E501

        PV system ID as Guid.  # noqa: E501

        :return: The id of this PvSystemMetadataExpertModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PvSystemMetadataExpertModel.

        PV system ID as Guid.  # noqa: E501

        :param id: The id of this PvSystemMetadataExpertModel.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PvSystemMetadataExpertModel.  # noqa: E501

        PV system name.  # noqa: E501

        :return: The name of this PvSystemMetadataExpertModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PvSystemMetadataExpertModel.

        PV system name.  # noqa: E501

        :param name: The name of this PvSystemMetadataExpertModel.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def peak_power(self):
        """Gets the peak_power of this PvSystemMetadataExpertModel.  # noqa: E501

        Total peak power of PV system.  # noqa: E501

        :return: The peak_power of this PvSystemMetadataExpertModel.  # noqa: E501
        :rtype: float
        """
        return self._peak_power

    @peak_power.setter
    def peak_power(self, peak_power):
        """Sets the peak_power of this PvSystemMetadataExpertModel.

        Total peak power of PV system.  # noqa: E501

        :param peak_power: The peak_power of this PvSystemMetadataExpertModel.  # noqa: E501
        :type: float
        """

        self._peak_power = peak_power

    @property
    def address(self):
        """Gets the address of this PvSystemMetadataExpertModel.  # noqa: E501

        Address of PV system.  # noqa: E501

        :return: The address of this PvSystemMetadataExpertModel.  # noqa: E501
        :rtype: AddressModel
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PvSystemMetadataExpertModel.

        Address of PV system.  # noqa: E501

        :param address: The address of this PvSystemMetadataExpertModel.  # noqa: E501
        :type: AddressModel
        """

        self._address = address

    @property
    def installation_date(self):
        """Gets the installation_date of this PvSystemMetadataExpertModel.  # noqa: E501

        Installation date of PV system.  # noqa: E501

        :return: The installation_date of this PvSystemMetadataExpertModel.  # noqa: E501
        :rtype: datetime
        """
        return self._installation_date

    @installation_date.setter
    def installation_date(self, installation_date):
        """Sets the installation_date of this PvSystemMetadataExpertModel.

        Installation date of PV system.  # noqa: E501

        :param installation_date: The installation_date of this PvSystemMetadataExpertModel.  # noqa: E501
        :type: datetime
        """

        self._installation_date = installation_date

    @property
    def dalo_device_info(self):
        """Gets the dalo_device_info of this PvSystemMetadataExpertModel.  # noqa: E501

        Dictionary of device infos for dalo ids.  # noqa: E501

        :return: The dalo_device_info of this PvSystemMetadataExpertModel.  # noqa: E501
        :rtype: dict(str, DeviceInfoModel)
        """
        return self._dalo_device_info

    @dalo_device_info.setter
    def dalo_device_info(self, dalo_device_info):
        """Sets the dalo_device_info of this PvSystemMetadataExpertModel.

        Dictionary of device infos for dalo ids.  # noqa: E501

        :param dalo_device_info: The dalo_device_info of this PvSystemMetadataExpertModel.  # noqa: E501
        :type: dict(str, DeviceInfoModel)
        """

        self._dalo_device_info = dalo_device_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PvSystemMetadataExpertModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PvSystemMetadataExpertModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
