# coding: utf-8

"""
    ThirdPartyApi

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class LoginModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'password': 'str',
        'api_key': 'str',
        'device_id': 'str',
        'device_description': 'str',
        'app_version': 'str',
        'os_version': 'str'
    }

    attribute_map = {
        'username': 'Username',
        'password': 'Password',
        'api_key': 'ApiKey',
        'device_id': 'DeviceId',
        'device_description': 'DeviceDescription',
        'app_version': 'AppVersion',
        'os_version': 'OsVersion'
    }

    def __init__(self, username=None, password=None, api_key=None, device_id=None, device_description=None, app_version=None, os_version=None):  # noqa: E501
        """LoginModel - a model defined in Swagger"""  # noqa: E501

        self._username = None
        self._password = None
        self._api_key = None
        self._device_id = None
        self._device_description = None
        self._app_version = None
        self._os_version = None
        self.discriminator = None

        self.username = username
        self.password = password
        self.api_key = api_key
        self.device_id = device_id
        if device_description is not None:
            self.device_description = device_description
        if app_version is not None:
            self.app_version = app_version
        if os_version is not None:
            self.os_version = os_version

    @property
    def username(self):
        """Gets the username of this LoginModel.  # noqa: E501


        :return: The username of this LoginModel.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this LoginModel.


        :param username: The username of this LoginModel.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this LoginModel.  # noqa: E501


        :return: The password of this LoginModel.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this LoginModel.


        :param password: The password of this LoginModel.  # noqa: E501
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def api_key(self):
        """Gets the api_key of this LoginModel.  # noqa: E501


        :return: The api_key of this LoginModel.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this LoginModel.


        :param api_key: The api_key of this LoginModel.  # noqa: E501
        :type: str
        """
        if api_key is None:
            raise ValueError("Invalid value for `api_key`, must not be `None`")  # noqa: E501

        self._api_key = api_key

    @property
    def device_id(self):
        """Gets the device_id of this LoginModel.  # noqa: E501


        :return: The device_id of this LoginModel.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this LoginModel.


        :param device_id: The device_id of this LoginModel.  # noqa: E501
        :type: str
        """
        if device_id is None:
            raise ValueError("Invalid value for `device_id`, must not be `None`")  # noqa: E501

        self._device_id = device_id

    @property
    def device_description(self):
        """Gets the device_description of this LoginModel.  # noqa: E501


        :return: The device_description of this LoginModel.  # noqa: E501
        :rtype: str
        """
        return self._device_description

    @device_description.setter
    def device_description(self, device_description):
        """Sets the device_description of this LoginModel.


        :param device_description: The device_description of this LoginModel.  # noqa: E501
        :type: str
        """

        self._device_description = device_description

    @property
    def app_version(self):
        """Gets the app_version of this LoginModel.  # noqa: E501


        :return: The app_version of this LoginModel.  # noqa: E501
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this LoginModel.


        :param app_version: The app_version of this LoginModel.  # noqa: E501
        :type: str
        """

        self._app_version = app_version

    @property
    def os_version(self):
        """Gets the os_version of this LoginModel.  # noqa: E501


        :return: The os_version of this LoginModel.  # noqa: E501
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this LoginModel.


        :param os_version: The os_version of this LoginModel.  # noqa: E501
        :type: str
        """

        self._os_version = os_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoginModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoginModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
