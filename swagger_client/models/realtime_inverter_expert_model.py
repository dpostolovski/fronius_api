# coding: utf-8

"""
    ThirdPartyApi

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RealtimeInverterExpertModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_desc': 'str',
        'node_type': 'int',
        'device_type': 'int',
        'ac_power': 'float',
        'energy_day': 'float',
        'energy_year': 'float',
        'energy_total': 'float',
        'soc': 'float',
        'batt_mode': 'str'
    }

    attribute_map = {
        'device_desc': 'DeviceDesc',
        'node_type': 'NodeType',
        'device_type': 'DeviceType',
        'ac_power': 'AcPower',
        'energy_day': 'EnergyDay',
        'energy_year': 'EnergyYear',
        'energy_total': 'EnergyTotal',
        'soc': 'SOC',
        'batt_mode': 'BattMode'
    }

    def __init__(self, device_desc=None, node_type=None, device_type=None, ac_power=None, energy_day=None, energy_year=None, energy_total=None, soc=None, batt_mode=None):  # noqa: E501
        """RealtimeInverterExpertModel - a model defined in Swagger"""  # noqa: E501

        self._device_desc = None
        self._node_type = None
        self._device_type = None
        self._ac_power = None
        self._energy_day = None
        self._energy_year = None
        self._energy_total = None
        self._soc = None
        self._batt_mode = None
        self.discriminator = None

        if device_desc is not None:
            self.device_desc = device_desc
        if node_type is not None:
            self.node_type = node_type
        if device_type is not None:
            self.device_type = device_type
        if ac_power is not None:
            self.ac_power = ac_power
        if energy_day is not None:
            self.energy_day = energy_day
        if energy_year is not None:
            self.energy_year = energy_year
        if energy_total is not None:
            self.energy_total = energy_total
        if soc is not None:
            self.soc = soc
        if batt_mode is not None:
            self.batt_mode = batt_mode

    @property
    def device_desc(self):
        """Gets the device_desc of this RealtimeInverterExpertModel.  # noqa: E501


        :return: The device_desc of this RealtimeInverterExpertModel.  # noqa: E501
        :rtype: str
        """
        return self._device_desc

    @device_desc.setter
    def device_desc(self, device_desc):
        """Sets the device_desc of this RealtimeInverterExpertModel.


        :param device_desc: The device_desc of this RealtimeInverterExpertModel.  # noqa: E501
        :type: str
        """

        self._device_desc = device_desc

    @property
    def node_type(self):
        """Gets the node_type of this RealtimeInverterExpertModel.  # noqa: E501


        :return: The node_type of this RealtimeInverterExpertModel.  # noqa: E501
        :rtype: int
        """
        return self._node_type

    @node_type.setter
    def node_type(self, node_type):
        """Sets the node_type of this RealtimeInverterExpertModel.


        :param node_type: The node_type of this RealtimeInverterExpertModel.  # noqa: E501
        :type: int
        """

        self._node_type = node_type

    @property
    def device_type(self):
        """Gets the device_type of this RealtimeInverterExpertModel.  # noqa: E501


        :return: The device_type of this RealtimeInverterExpertModel.  # noqa: E501
        :rtype: int
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this RealtimeInverterExpertModel.


        :param device_type: The device_type of this RealtimeInverterExpertModel.  # noqa: E501
        :type: int
        """

        self._device_type = device_type

    @property
    def ac_power(self):
        """Gets the ac_power of this RealtimeInverterExpertModel.  # noqa: E501


        :return: The ac_power of this RealtimeInverterExpertModel.  # noqa: E501
        :rtype: float
        """
        return self._ac_power

    @ac_power.setter
    def ac_power(self, ac_power):
        """Sets the ac_power of this RealtimeInverterExpertModel.


        :param ac_power: The ac_power of this RealtimeInverterExpertModel.  # noqa: E501
        :type: float
        """

        self._ac_power = ac_power

    @property
    def energy_day(self):
        """Gets the energy_day of this RealtimeInverterExpertModel.  # noqa: E501


        :return: The energy_day of this RealtimeInverterExpertModel.  # noqa: E501
        :rtype: float
        """
        return self._energy_day

    @energy_day.setter
    def energy_day(self, energy_day):
        """Sets the energy_day of this RealtimeInverterExpertModel.


        :param energy_day: The energy_day of this RealtimeInverterExpertModel.  # noqa: E501
        :type: float
        """

        self._energy_day = energy_day

    @property
    def energy_year(self):
        """Gets the energy_year of this RealtimeInverterExpertModel.  # noqa: E501


        :return: The energy_year of this RealtimeInverterExpertModel.  # noqa: E501
        :rtype: float
        """
        return self._energy_year

    @energy_year.setter
    def energy_year(self, energy_year):
        """Sets the energy_year of this RealtimeInverterExpertModel.


        :param energy_year: The energy_year of this RealtimeInverterExpertModel.  # noqa: E501
        :type: float
        """

        self._energy_year = energy_year

    @property
    def energy_total(self):
        """Gets the energy_total of this RealtimeInverterExpertModel.  # noqa: E501


        :return: The energy_total of this RealtimeInverterExpertModel.  # noqa: E501
        :rtype: float
        """
        return self._energy_total

    @energy_total.setter
    def energy_total(self, energy_total):
        """Sets the energy_total of this RealtimeInverterExpertModel.


        :param energy_total: The energy_total of this RealtimeInverterExpertModel.  # noqa: E501
        :type: float
        """

        self._energy_total = energy_total

    @property
    def soc(self):
        """Gets the soc of this RealtimeInverterExpertModel.  # noqa: E501


        :return: The soc of this RealtimeInverterExpertModel.  # noqa: E501
        :rtype: float
        """
        return self._soc

    @soc.setter
    def soc(self, soc):
        """Sets the soc of this RealtimeInverterExpertModel.


        :param soc: The soc of this RealtimeInverterExpertModel.  # noqa: E501
        :type: float
        """

        self._soc = soc

    @property
    def batt_mode(self):
        """Gets the batt_mode of this RealtimeInverterExpertModel.  # noqa: E501


        :return: The batt_mode of this RealtimeInverterExpertModel.  # noqa: E501
        :rtype: str
        """
        return self._batt_mode

    @batt_mode.setter
    def batt_mode(self, batt_mode):
        """Sets the batt_mode of this RealtimeInverterExpertModel.


        :param batt_mode: The batt_mode of this RealtimeInverterExpertModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["Normal", "ServiceMode", "Calibrate"]  # noqa: E501
        if batt_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `batt_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(batt_mode, allowed_values)
            )

        self._batt_mode = batt_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RealtimeInverterExpertModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RealtimeInverterExpertModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
