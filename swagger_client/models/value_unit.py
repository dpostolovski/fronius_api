# coding: utf-8

"""
    ThirdPartyApi

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ValueUnit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'value': 'float',
        'unit': 'str'
    }

    attribute_map = {
        'value': 'Value',
        'unit': 'Unit'
    }

    def __init__(self, value=None, unit=None):  # noqa: E501
        """ValueUnit - a model defined in Swagger"""  # noqa: E501
        self._value = None
        self._unit = None
        self.discriminator = None
        if value is not None:
            self.value = value
        if unit is not None:
            self.unit = unit

    @property
    def value(self):
        """Gets the value of this ValueUnit.  # noqa: E501


        :return: The value of this ValueUnit.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ValueUnit.


        :param value: The value of this ValueUnit.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def unit(self):
        """Gets the unit of this ValueUnit.  # noqa: E501


        :return: The unit of this ValueUnit.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this ValueUnit.


        :param unit: The unit of this ValueUnit.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "Energy_Ws", "Energy_Wh", "Energy_kWh", "Energy_MWh", "Energy_GWh", "Voltage_mV", "Voltage_10mV", "Voltage_100mV", "Voltage_V", "Voltage_kV", "Voltage_MV", "Insolation_mW_per_m2", "Insolation_10mW_per_m2", "Insolation_100mW_per_m2", "Insolation_W_per_m2", "Insolation_kW_per_m2", "Insolation_MW_per_m2", "Current_mA", "Current_10mA", "Current_100mA", "Current_A", "Current_kA", "Current_MA", "Temperature_C", "Temperature_F", "CO2_g_per_kWh", "CO2_10g_per_kWh", "CO2_kg_per_kWh", "Velocity_km_per_h", "Database", "Velocity_mph", "Pressure_mbar", "Pressure_bar", "Power_mW", "Power_W", "Power_10W", "Power_kW", "Power_MW", "Power_GW", "Volume_l", "Volume_m3", "Velocity_m_per_s", "Percent_m", "Percent_c", "Percent_d", "Percent", "Pressure_hPa", "Resistance_Ohm", "Resistance_hOhm", "Resistance_kOhm", "Resistance_10kOhm", "Resistance_100kOhm", "Resistance_MOhm", "Frequency_1mHz", "Frequency_10mHz", "Frequency_Hz", "Frequency_kHz", "Frequency_MHz", "Weight_kg", "Weight_t", "Weight_kt", "Weight_Mt", "Weight_Gt", "InsolationEnergy_Ws_per_m2", "InsolationEnergy_Wh_per_m2", "InsolationEnergy_kWh_per_m2", "Time_h", "Time_min", "Time_ms", "Time_s", "Rotation_rpm", "Charge_mAh", "Charge_cAh", "Charge_Ah", "ApparentPower_VA", "ReactivePower_var", "Currency_m", "Currency_c", "Currency_d", "Currency", "Currency_k", "Currency_Mio", "Currency_Mrd", "PercentPerSecond", "PercentPerHertz", "Cycles", "One", "WattPeak", "IncomePerkWh", "IncomePerWh", "Number", "NormEnergy_kWh_per_kWp", "NormEnergy_MWh_per_kWp", "NormEnergy_GWh_per_kWp", "NormPower_kW_per_kWp", "Temperature_K", "kg_per_m2", "Length_mm"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"  # noqa: E501
                .format(unit, allowed_values)
            )

        self._unit = unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ValueUnit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ValueUnit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
