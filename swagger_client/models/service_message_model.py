# coding: utf-8

"""
    ThirdPartyApi

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ServiceMessageModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pv_system_id': 'str',
        'type': 'str',
        'dalo_id': 'str',
        'device_id': 'str',
        'error_code': 'int',
        'node_type': 'int',
        'device_type': 'int',
        'log_date': 'datetime',
        'text': 'str'
    }

    attribute_map = {
        'pv_system_id': 'PvSystemId',
        'type': 'Type',
        'dalo_id': 'DaloId',
        'device_id': 'DeviceId',
        'error_code': 'ErrorCode',
        'node_type': 'NodeType',
        'device_type': 'DeviceType',
        'log_date': 'LogDate',
        'text': 'Text'
    }

    def __init__(self, pv_system_id=None, type=None, dalo_id=None, device_id=None, error_code=None, node_type=None, device_type=None, log_date=None, text=None):  # noqa: E501
        """ServiceMessageModel - a model defined in Swagger"""  # noqa: E501

        self._pv_system_id = None
        self._type = None
        self._dalo_id = None
        self._device_id = None
        self._error_code = None
        self._node_type = None
        self._device_type = None
        self._log_date = None
        self._text = None
        self.discriminator = None

        if pv_system_id is not None:
            self.pv_system_id = pv_system_id
        if type is not None:
            self.type = type
        if dalo_id is not None:
            self.dalo_id = dalo_id
        if device_id is not None:
            self.device_id = device_id
        if error_code is not None:
            self.error_code = error_code
        if node_type is not None:
            self.node_type = node_type
        if device_type is not None:
            self.device_type = device_type
        if log_date is not None:
            self.log_date = log_date
        if text is not None:
            self.text = text

    @property
    def pv_system_id(self):
        """Gets the pv_system_id of this ServiceMessageModel.  # noqa: E501

        PV system ID as Guid.  # noqa: E501

        :return: The pv_system_id of this ServiceMessageModel.  # noqa: E501
        :rtype: str
        """
        return self._pv_system_id

    @pv_system_id.setter
    def pv_system_id(self, pv_system_id):
        """Sets the pv_system_id of this ServiceMessageModel.

        PV system ID as Guid.  # noqa: E501

        :param pv_system_id: The pv_system_id of this ServiceMessageModel.  # noqa: E501
        :type: str
        """

        self._pv_system_id = pv_system_id

    @property
    def type(self):
        """Gets the type of this ServiceMessageModel.  # noqa: E501

        Service message type, i.e. 'Error' or 'Event'.  # noqa: E501

        :return: The type of this ServiceMessageModel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ServiceMessageModel.

        Service message type, i.e. 'Error' or 'Event'.  # noqa: E501

        :param type: The type of this ServiceMessageModel.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def dalo_id(self):
        """Gets the dalo_id of this ServiceMessageModel.  # noqa: E501

        Dalo of service message.  # noqa: E501

        :return: The dalo_id of this ServiceMessageModel.  # noqa: E501
        :rtype: str
        """
        return self._dalo_id

    @dalo_id.setter
    def dalo_id(self, dalo_id):
        """Sets the dalo_id of this ServiceMessageModel.

        Dalo of service message.  # noqa: E501

        :param dalo_id: The dalo_id of this ServiceMessageModel.  # noqa: E501
        :type: str
        """

        self._dalo_id = dalo_id

    @property
    def device_id(self):
        """Gets the device_id of this ServiceMessageModel.  # noqa: E501

        Device ID of service message.  # noqa: E501

        :return: The device_id of this ServiceMessageModel.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this ServiceMessageModel.

        Device ID of service message.  # noqa: E501

        :param device_id: The device_id of this ServiceMessageModel.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def error_code(self):
        """Gets the error_code of this ServiceMessageModel.  # noqa: E501

        Error code.  # noqa: E501

        :return: The error_code of this ServiceMessageModel.  # noqa: E501
        :rtype: int
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this ServiceMessageModel.

        Error code.  # noqa: E501

        :param error_code: The error_code of this ServiceMessageModel.  # noqa: E501
        :type: int
        """

        self._error_code = error_code

    @property
    def node_type(self):
        """Gets the node_type of this ServiceMessageModel.  # noqa: E501

        Node type of device.  # noqa: E501

        :return: The node_type of this ServiceMessageModel.  # noqa: E501
        :rtype: int
        """
        return self._node_type

    @node_type.setter
    def node_type(self, node_type):
        """Sets the node_type of this ServiceMessageModel.

        Node type of device.  # noqa: E501

        :param node_type: The node_type of this ServiceMessageModel.  # noqa: E501
        :type: int
        """

        self._node_type = node_type

    @property
    def device_type(self):
        """Gets the device_type of this ServiceMessageModel.  # noqa: E501

        Device type of device.  # noqa: E501

        :return: The device_type of this ServiceMessageModel.  # noqa: E501
        :rtype: int
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this ServiceMessageModel.

        Device type of device.  # noqa: E501

        :param device_type: The device_type of this ServiceMessageModel.  # noqa: E501
        :type: int
        """

        self._device_type = device_type

    @property
    def log_date(self):
        """Gets the log_date of this ServiceMessageModel.  # noqa: E501

        Log time of service message.  # noqa: E501

        :return: The log_date of this ServiceMessageModel.  # noqa: E501
        :rtype: datetime
        """
        return self._log_date

    @log_date.setter
    def log_date(self, log_date):
        """Sets the log_date of this ServiceMessageModel.

        Log time of service message.  # noqa: E501

        :param log_date: The log_date of this ServiceMessageModel.  # noqa: E501
        :type: datetime
        """

        self._log_date = log_date

    @property
    def text(self):
        """Gets the text of this ServiceMessageModel.  # noqa: E501

        Service message text.  # noqa: E501

        :return: The text of this ServiceMessageModel.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ServiceMessageModel.

        Service message text.  # noqa: E501

        :param text: The text of this ServiceMessageModel.  # noqa: E501
        :type: str
        """

        self._text = text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceMessageModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceMessageModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
