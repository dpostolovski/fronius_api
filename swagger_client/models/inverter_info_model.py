# coding: utf-8

"""
    ThirdPartyApi

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class InverterInfoModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_id': 'str',
        'peak_power_dc1': 'float',
        'peak_power_dc2': 'float',
        'nominal_ac_power': 'float',
        'device_name': 'str',
        'serialnumber': 'str'
    }

    attribute_map = {
        'device_id': 'DeviceId',
        'peak_power_dc1': 'PeakPowerDc1',
        'peak_power_dc2': 'PeakPowerDc2',
        'nominal_ac_power': 'NominalAcPower',
        'device_name': 'DeviceName',
        'serialnumber': 'Serialnumber'
    }

    def __init__(self, device_id=None, peak_power_dc1=None, peak_power_dc2=None, nominal_ac_power=None, device_name=None, serialnumber=None):  # noqa: E501
        """InverterInfoModel - a model defined in Swagger"""  # noqa: E501
        self._device_id = None
        self._peak_power_dc1 = None
        self._peak_power_dc2 = None
        self._nominal_ac_power = None
        self._device_name = None
        self._serialnumber = None
        self.discriminator = None
        if device_id is not None:
            self.device_id = device_id
        if peak_power_dc1 is not None:
            self.peak_power_dc1 = peak_power_dc1
        if peak_power_dc2 is not None:
            self.peak_power_dc2 = peak_power_dc2
        if nominal_ac_power is not None:
            self.nominal_ac_power = nominal_ac_power
        if device_name is not None:
            self.device_name = device_name
        if serialnumber is not None:
            self.serialnumber = serialnumber

    @property
    def device_id(self):
        """Gets the device_id of this InverterInfoModel.  # noqa: E501

        Device id as Guid.  # noqa: E501

        :return: The device_id of this InverterInfoModel.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this InverterInfoModel.

        Device id as Guid.  # noqa: E501

        :param device_id: The device_id of this InverterInfoModel.  # noqa: E501
        :type: str
        """

        self._device_id = device_id

    @property
    def peak_power_dc1(self):
        """Gets the peak_power_dc1 of this InverterInfoModel.  # noqa: E501

        Peak power for DC1, if available, otherwise for total.  # noqa: E501

        :return: The peak_power_dc1 of this InverterInfoModel.  # noqa: E501
        :rtype: float
        """
        return self._peak_power_dc1

    @peak_power_dc1.setter
    def peak_power_dc1(self, peak_power_dc1):
        """Sets the peak_power_dc1 of this InverterInfoModel.

        Peak power for DC1, if available, otherwise for total.  # noqa: E501

        :param peak_power_dc1: The peak_power_dc1 of this InverterInfoModel.  # noqa: E501
        :type: float
        """

        self._peak_power_dc1 = peak_power_dc1

    @property
    def peak_power_dc2(self):
        """Gets the peak_power_dc2 of this InverterInfoModel.  # noqa: E501

        Peak power for DC2, if available and configured.  # noqa: E501

        :return: The peak_power_dc2 of this InverterInfoModel.  # noqa: E501
        :rtype: float
        """
        return self._peak_power_dc2

    @peak_power_dc2.setter
    def peak_power_dc2(self, peak_power_dc2):
        """Sets the peak_power_dc2 of this InverterInfoModel.

        Peak power for DC2, if available and configured.  # noqa: E501

        :param peak_power_dc2: The peak_power_dc2 of this InverterInfoModel.  # noqa: E501
        :type: float
        """

        self._peak_power_dc2 = peak_power_dc2

    @property
    def nominal_ac_power(self):
        """Gets the nominal_ac_power of this InverterInfoModel.  # noqa: E501

        Nominal AC power of device.  # noqa: E501

        :return: The nominal_ac_power of this InverterInfoModel.  # noqa: E501
        :rtype: float
        """
        return self._nominal_ac_power

    @nominal_ac_power.setter
    def nominal_ac_power(self, nominal_ac_power):
        """Sets the nominal_ac_power of this InverterInfoModel.

        Nominal AC power of device.  # noqa: E501

        :param nominal_ac_power: The nominal_ac_power of this InverterInfoModel.  # noqa: E501
        :type: float
        """

        self._nominal_ac_power = nominal_ac_power

    @property
    def device_name(self):
        """Gets the device_name of this InverterInfoModel.  # noqa: E501

        Name of device.  # noqa: E501

        :return: The device_name of this InverterInfoModel.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this InverterInfoModel.

        Name of device.  # noqa: E501

        :param device_name: The device_name of this InverterInfoModel.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def serialnumber(self):
        """Gets the serialnumber of this InverterInfoModel.  # noqa: E501

        Serial number of device.  # noqa: E501

        :return: The serialnumber of this InverterInfoModel.  # noqa: E501
        :rtype: str
        """
        return self._serialnumber

    @serialnumber.setter
    def serialnumber(self, serialnumber):
        """Sets the serialnumber of this InverterInfoModel.

        Serial number of device.  # noqa: E501

        :param serialnumber: The serialnumber of this InverterInfoModel.  # noqa: E501
        :type: str
        """

        self._serialnumber = serialnumber

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InverterInfoModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InverterInfoModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
