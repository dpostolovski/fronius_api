# coding: utf-8

"""
    ThirdPartyApi

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class EnergyFlowModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_online': 'bool',
        'p_grid': 'float',
        'p_load': 'float',
        'p_akku': 'float',
        'p_pv': 'float',
        'soc': 'float',
        'batt_mode': 'str',
        'p_ohm_pilot': 'float',
        't_ohm_pilot': 'float',
        'own_consumption': 'float',
        'self_sufficiency': 'float'
    }

    attribute_map = {
        'is_online': 'IsOnline',
        'p_grid': 'P_Grid',
        'p_load': 'P_Load',
        'p_akku': 'P_Akku',
        'p_pv': 'P_PV',
        'soc': 'SOC',
        'batt_mode': 'BattMode',
        'p_ohm_pilot': 'P_OhmPilot',
        't_ohm_pilot': 'T_OhmPilot',
        'own_consumption': 'OwnConsumption',
        'self_sufficiency': 'SelfSufficiency'
    }

    def __init__(self, is_online=None, p_grid=None, p_load=None, p_akku=None, p_pv=None, soc=None, batt_mode=None, p_ohm_pilot=None, t_ohm_pilot=None, own_consumption=None, self_sufficiency=None):  # noqa: E501
        """EnergyFlowModel - a model defined in Swagger"""  # noqa: E501

        self._is_online = None
        self._p_grid = None
        self._p_load = None
        self._p_akku = None
        self._p_pv = None
        self._soc = None
        self._batt_mode = None
        self._p_ohm_pilot = None
        self._t_ohm_pilot = None
        self._own_consumption = None
        self._self_sufficiency = None
        self.discriminator = None

        if is_online is not None:
            self.is_online = is_online
        if p_grid is not None:
            self.p_grid = p_grid
        if p_load is not None:
            self.p_load = p_load
        if p_akku is not None:
            self.p_akku = p_akku
        if p_pv is not None:
            self.p_pv = p_pv
        if soc is not None:
            self.soc = soc
        if batt_mode is not None:
            self.batt_mode = batt_mode
        if p_ohm_pilot is not None:
            self.p_ohm_pilot = p_ohm_pilot
        if t_ohm_pilot is not None:
            self.t_ohm_pilot = t_ohm_pilot
        if own_consumption is not None:
            self.own_consumption = own_consumption
        if self_sufficiency is not None:
            self.self_sufficiency = self_sufficiency

    @property
    def is_online(self):
        """Gets the is_online of this EnergyFlowModel.  # noqa: E501

        Is PV system online.  # noqa: E501

        :return: The is_online of this EnergyFlowModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_online

    @is_online.setter
    def is_online(self, is_online):
        """Sets the is_online of this EnergyFlowModel.

        Is PV system online.  # noqa: E501

        :param is_online: The is_online of this EnergyFlowModel.  # noqa: E501
        :type: bool
        """

        self._is_online = is_online

    @property
    def p_grid(self):
        """Gets the p_grid of this EnergyFlowModel.  # noqa: E501

        Current flow from/to grid.  # noqa: E501

        :return: The p_grid of this EnergyFlowModel.  # noqa: E501
        :rtype: float
        """
        return self._p_grid

    @p_grid.setter
    def p_grid(self, p_grid):
        """Sets the p_grid of this EnergyFlowModel.

        Current flow from/to grid.  # noqa: E501

        :param p_grid: The p_grid of this EnergyFlowModel.  # noqa: E501
        :type: float
        """

        self._p_grid = p_grid

    @property
    def p_load(self):
        """Gets the p_load of this EnergyFlowModel.  # noqa: E501

        Current flow to consumer.  # noqa: E501

        :return: The p_load of this EnergyFlowModel.  # noqa: E501
        :rtype: float
        """
        return self._p_load

    @p_load.setter
    def p_load(self, p_load):
        """Sets the p_load of this EnergyFlowModel.

        Current flow to consumer.  # noqa: E501

        :param p_load: The p_load of this EnergyFlowModel.  # noqa: E501
        :type: float
        """

        self._p_load = p_load

    @property
    def p_akku(self):
        """Gets the p_akku of this EnergyFlowModel.  # noqa: E501

        Current flow from/to battery, if battery available.  # noqa: E501

        :return: The p_akku of this EnergyFlowModel.  # noqa: E501
        :rtype: float
        """
        return self._p_akku

    @p_akku.setter
    def p_akku(self, p_akku):
        """Sets the p_akku of this EnergyFlowModel.

        Current flow from/to battery, if battery available.  # noqa: E501

        :param p_akku: The p_akku of this EnergyFlowModel.  # noqa: E501
        :type: float
        """

        self._p_akku = p_akku

    @property
    def p_pv(self):
        """Gets the p_pv of this EnergyFlowModel.  # noqa: E501

        Current flow from PV.  # noqa: E501

        :return: The p_pv of this EnergyFlowModel.  # noqa: E501
        :rtype: float
        """
        return self._p_pv

    @p_pv.setter
    def p_pv(self, p_pv):
        """Sets the p_pv of this EnergyFlowModel.

        Current flow from PV.  # noqa: E501

        :param p_pv: The p_pv of this EnergyFlowModel.  # noqa: E501
        :type: float
        """

        self._p_pv = p_pv

    @property
    def soc(self):
        """Gets the soc of this EnergyFlowModel.  # noqa: E501

        Battery state of charge, if battery available.  # noqa: E501

        :return: The soc of this EnergyFlowModel.  # noqa: E501
        :rtype: float
        """
        return self._soc

    @soc.setter
    def soc(self, soc):
        """Sets the soc of this EnergyFlowModel.

        Battery state of charge, if battery available.  # noqa: E501

        :param soc: The soc of this EnergyFlowModel.  # noqa: E501
        :type: float
        """

        self._soc = soc

    @property
    def batt_mode(self):
        """Gets the batt_mode of this EnergyFlowModel.  # noqa: E501

        Battery mode, if battery available.  # noqa: E501

        :return: The batt_mode of this EnergyFlowModel.  # noqa: E501
        :rtype: str
        """
        return self._batt_mode

    @batt_mode.setter
    def batt_mode(self, batt_mode):
        """Sets the batt_mode of this EnergyFlowModel.

        Battery mode, if battery available.  # noqa: E501

        :param batt_mode: The batt_mode of this EnergyFlowModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["Normal", "ServiceMode", "Calibrate"]  # noqa: E501
        if batt_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `batt_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(batt_mode, allowed_values)
            )

        self._batt_mode = batt_mode

    @property
    def p_ohm_pilot(self):
        """Gets the p_ohm_pilot of this EnergyFlowModel.  # noqa: E501

        Current flow to Ohm pilot, if Ohm pilot available.  # noqa: E501

        :return: The p_ohm_pilot of this EnergyFlowModel.  # noqa: E501
        :rtype: float
        """
        return self._p_ohm_pilot

    @p_ohm_pilot.setter
    def p_ohm_pilot(self, p_ohm_pilot):
        """Sets the p_ohm_pilot of this EnergyFlowModel.

        Current flow to Ohm pilot, if Ohm pilot available.  # noqa: E501

        :param p_ohm_pilot: The p_ohm_pilot of this EnergyFlowModel.  # noqa: E501
        :type: float
        """

        self._p_ohm_pilot = p_ohm_pilot

    @property
    def t_ohm_pilot(self):
        """Gets the t_ohm_pilot of this EnergyFlowModel.  # noqa: E501

        Current temperature of Ohm pilot, if Ohm pilot available.  # noqa: E501

        :return: The t_ohm_pilot of this EnergyFlowModel.  # noqa: E501
        :rtype: float
        """
        return self._t_ohm_pilot

    @t_ohm_pilot.setter
    def t_ohm_pilot(self, t_ohm_pilot):
        """Sets the t_ohm_pilot of this EnergyFlowModel.

        Current temperature of Ohm pilot, if Ohm pilot available.  # noqa: E501

        :param t_ohm_pilot: The t_ohm_pilot of this EnergyFlowModel.  # noqa: E501
        :type: float
        """

        self._t_ohm_pilot = t_ohm_pilot

    @property
    def own_consumption(self):
        """Gets the own_consumption of this EnergyFlowModel.  # noqa: E501


        :return: The own_consumption of this EnergyFlowModel.  # noqa: E501
        :rtype: float
        """
        return self._own_consumption

    @own_consumption.setter
    def own_consumption(self, own_consumption):
        """Sets the own_consumption of this EnergyFlowModel.


        :param own_consumption: The own_consumption of this EnergyFlowModel.  # noqa: E501
        :type: float
        """

        self._own_consumption = own_consumption

    @property
    def self_sufficiency(self):
        """Gets the self_sufficiency of this EnergyFlowModel.  # noqa: E501


        :return: The self_sufficiency of this EnergyFlowModel.  # noqa: E501
        :rtype: float
        """
        return self._self_sufficiency

    @self_sufficiency.setter
    def self_sufficiency(self, self_sufficiency):
        """Sets the self_sufficiency of this EnergyFlowModel.


        :param self_sufficiency: The self_sufficiency of this EnergyFlowModel.  # noqa: E501
        :type: float
        """

        self._self_sufficiency = self_sufficiency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnergyFlowModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnergyFlowModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
