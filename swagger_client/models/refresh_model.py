# coding: utf-8

"""
    ThirdPartyApi

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RefreshModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_token': 'str',
        'refresh_token': 'str',
        'device_id': 'str',
        'device_description': 'str',
        'app_version': 'str',
        'os_version': 'str'
    }

    attribute_map = {
        'access_token': 'AccessToken',
        'refresh_token': 'RefreshToken',
        'device_id': 'DeviceId',
        'device_description': 'DeviceDescription',
        'app_version': 'AppVersion',
        'os_version': 'OsVersion'
    }

    def __init__(self, access_token=None, refresh_token=None, device_id=None, device_description=None, app_version=None, os_version=None):  # noqa: E501
        """RefreshModel - a model defined in Swagger"""  # noqa: E501
        self._access_token = None
        self._refresh_token = None
        self._device_id = None
        self._device_description = None
        self._app_version = None
        self._os_version = None
        self.discriminator = None
        self.access_token = access_token
        self.refresh_token = refresh_token
        self.device_id = device_id
        if device_description is not None:
            self.device_description = device_description
        if app_version is not None:
            self.app_version = app_version
        if os_version is not None:
            self.os_version = os_version

    @property
    def access_token(self):
        """Gets the access_token of this RefreshModel.  # noqa: E501


        :return: The access_token of this RefreshModel.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this RefreshModel.


        :param access_token: The access_token of this RefreshModel.  # noqa: E501
        :type: str
        """
        if access_token is None:
            raise ValueError("Invalid value for `access_token`, must not be `None`")  # noqa: E501

        self._access_token = access_token

    @property
    def refresh_token(self):
        """Gets the refresh_token of this RefreshModel.  # noqa: E501


        :return: The refresh_token of this RefreshModel.  # noqa: E501
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this RefreshModel.


        :param refresh_token: The refresh_token of this RefreshModel.  # noqa: E501
        :type: str
        """
        if refresh_token is None:
            raise ValueError("Invalid value for `refresh_token`, must not be `None`")  # noqa: E501

        self._refresh_token = refresh_token

    @property
    def device_id(self):
        """Gets the device_id of this RefreshModel.  # noqa: E501


        :return: The device_id of this RefreshModel.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this RefreshModel.


        :param device_id: The device_id of this RefreshModel.  # noqa: E501
        :type: str
        """
        if device_id is None:
            raise ValueError("Invalid value for `device_id`, must not be `None`")  # noqa: E501

        self._device_id = device_id

    @property
    def device_description(self):
        """Gets the device_description of this RefreshModel.  # noqa: E501


        :return: The device_description of this RefreshModel.  # noqa: E501
        :rtype: str
        """
        return self._device_description

    @device_description.setter
    def device_description(self, device_description):
        """Sets the device_description of this RefreshModel.


        :param device_description: The device_description of this RefreshModel.  # noqa: E501
        :type: str
        """

        self._device_description = device_description

    @property
    def app_version(self):
        """Gets the app_version of this RefreshModel.  # noqa: E501


        :return: The app_version of this RefreshModel.  # noqa: E501
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this RefreshModel.


        :param app_version: The app_version of this RefreshModel.  # noqa: E501
        :type: str
        """

        self._app_version = app_version

    @property
    def os_version(self):
        """Gets the os_version of this RefreshModel.  # noqa: E501


        :return: The os_version of this RefreshModel.  # noqa: E501
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this RefreshModel.


        :param os_version: The os_version of this RefreshModel.  # noqa: E501
        :type: str
        """

        self._os_version = os_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RefreshModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RefreshModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
